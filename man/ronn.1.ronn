ronn(1) -- build markdown-based man pages
========================================

## SYNOPSIS

`ronn`<br>
`ronn` [<OPTIONS>] <FILE>...<br>
`ronn` --man <FILE>...

## DESCRIPTION

The `ronn` utility converts ronn(5)-formatted source files to roff and HTML
manpages.

Under the first synopsis form -- with no <FILE> arguments -- `ronn` acts as
simple filter, reading ronn source text on standard input and writing
roff(5)-formatted text to standard output.

Under the second synopsis form, `ronn` builds HTML and roff output files based
on one or more input <FILE> names. The `--roff`, `--html`, and `--fragment`
options specify which output files should be generated. Multiple format
arguments may be specified to generate multiple output files.

Under the third synopsis form, `ronn` converts one or more <FILE>s to roff
and displays on the current console as with man(1).

## FILES

The `ronn` command expects input to be formatted as ronn(5) text.  Source
files are typically named '<NAME>.<SECTION>.ronn' (e.g., `hello.1.ronn`).
The <NAME> and <SECTION> should match the name and section defined in the
<FILE>'s heading.

When building roff and/or HTML output files, destination filenames are
determined by taking the basename of the input <FILE> and adding the appropriate
file extension (or removing the file extension in the case of roff output).  For
example, executing `ronn hello.1.ronn` generates a `hello.1` file with roff
output and a `hello.1.html` file with HTML output.

## OPTIONS

The following arguments can be used to control the default output modes
described in the _DESCRIPTION_ section:

  * `--pipe`:
    Write generated output to standard output instead of to filename based on
    the input files. This is the default behavior when ronn source text is piped
    in on standard input and no <FILE> arguments are provided.

  * `-m`, `--man`:
    Display <FILE>s as if man(1) were invoked on the roff output file. This
    simulates default man behavior by piping the roff output through groff(1)
    and the paging program specified by the `MANPAGER` environment variable.

Format options control what files `ronn` generates or the output format when the
`--pipe` argument is specified. When no format options are given, both `--roff`
and `--html` are assumed.

  * `-r`, `--roff`:
    Generate roff output. This is the default behavior when no <FILE>s are given
    and ronn source text is read from standard input.

  * `-5`, `--html`:
    Generate output in HTML format.

  * `-f`, `--fragment`:
    Generate output in HTML format but only the document fragment, not the
    header, title, or footer.

All document attributes displayed in the header and footer areas of generated
content can be specified with these options:

  * `--manual`=<MANUAL>:
    The name of the manual this man page belongs to; <MANUAL> is prominently
    displayed top-center in the header area.

  * `--organization`=<NAME>:
    The name of the group, organization, or individual responsible for
    publishing the document; <NAME> is displayed in the bottom-left footer area.

  * `--date`=<DATE>:
    The document's published date; <DATE> must be formatted `YYYY-MM-DD` and is
    displayed in the bottom-center footer area. The <FILE> mtime is used when no
    <DATE> is given, or the current time when no <FILE> is available.

Miscellaneous options:

  * `-w`, `--warnings`
    Show troff warnings on standard error when performing roff conversion. Most
    often, warnings are the result of a bug in ronn's HTML to roff conversion
    logic.

  * `-W`:
    Disable troff warnings. Warnings are disabled by default. This option can be
    used to revert the effect of a previous `-w` argument.

## EXAMPLES

Generate `roff(7)` output on stdout:

    $ ronn < hello.1.ronn

Build roff and HTML output files based on the input filename and view the roff
manpage using man(1):

    $ ronn hello.1.ronn
    roff: hello.1
    html: hello.1.html
    $ man ./hello.1

Build only the HTML manpage:

    $ ronn --html test.1.ronn
    html: hello.1.html

Build only the roff manpage for all `.ronn` files in the current directory:

    $ ronn --roff *.ronn
    roff: hello.1
    roff: world.1

View a ronn file in the same way as man(1) without building a roff file:

    $ ronn -m hello.1.ronn

## ENVIRONMENT

  * `MANPAGER`:
    The paging program used for man pages. This is typically set to
    something like 'less -is'.

  * `PAGER`:
    Used instead of `MANPAGER` when `MANPAGER` is not defined.

## BUGS

**Ronn** is written in Ruby and depends on hpricot and rdiscount, extension
libraries that are non-trivial to install on some systems. A more portable
version of this program would be welcome.

## COPYRIGHT

Ronn is Copyright (C) 2009 Ryan Tomayko <tomayko.com/about>

## SEE ALSO

ronn(5), markdown(7), manpages(5), man(1), roff(7), groff(1)

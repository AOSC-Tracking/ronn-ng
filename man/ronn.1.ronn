ronn(1) -- build markdown-based man pages
========================================

## SYNOPSIS

`ronn` [<options>] <file>...<br>
`ronn` `-m`|`--man` <file>...<br>
`ronn` `-S`|`--server` <file>...<br>
`ronn` `--pipe` <file><br>
`ronn` < <file>

## DESCRIPTION

The `ronn` utility converts ronn(5)-formatted source files to roff and HTML
manpages.

Under the first synopsis form -- with no <file> arguments -- `ronn` acts as
simple filter, reading ronn source text on standard input and writing
roff(5)-formatted text to standard output.

Under the second synopsis form, `ronn` builds HTML and roff output files based
on one or more input <file> names. The `--roff`, `--html`, and `--fragment`
options specify which output files should be generated. Multiple format
arguments may be specified to generate multiple output files.

Under the third synopsis form, `ronn` converts one or more <file>s to roff
and displays on the current console as with man(1).

## FILES

The `ronn` command expects input to be formatted as ronn(5) text.  Source
files are typically named '<name>.<section>.ronn' (e.g., `hello.1.ronn`).
The <name> and <section> should match the name and section defined in the
<file>'s heading.

When building roff and/or HTML output files, destination filenames are
determined by taking the basename of the input <file> and adding the appropriate
file extension (or removing the file extension in the case of roff output).  For
example, executing `ronn hello.1.ronn` generates a `hello.1` file with roff
output and a `hello.1.html` file with HTML output.

## OPTIONS

These options control whether output is written to file(s), to standard output,
or piped directly to a man viewer.

  * `-m`, `--man`:
    Don't generate files, display <file>s as if man(1) were invoked on the roff
    output file. This simulates default man behavior by piping the roff output
    through groff(1) and the paging program specified by the `MANPAGER`
    environment variable.

  * `-S`, `--server`:
    Don't generate files, start an HTTP server at <http://localhost:1207/> and
    serve dynamically generated HTML for the set of input <file>s. A file named
    *example.2.ronn* is served as */example.2.html*. There's also an index page
    at the root with links to each <file>.

    The server respects the `--style` and document attribute options
    (`--manual`, `--date`, etc.). These same options can be varied at request
    time by giving them as query parameters: `?manual=FOO&style=dark,toc`

    *NOTE: The builtin server is designed to assist in the process of writing
    and styling manuals. It is in no way recommended as a general purpose web
    server.*

  * `--pipe`:
    Don't generate files, write generated output to standard output. This is the
    default behavior when ronn source text is piped in on standard input and no
    <file> arguments are provided.

Format options control what files `ronn` generates or the output format when the
`--pipe` argument is specified. When no format options are given, both `--roff`
and `--html` are assumed.

  * `-r`, `--roff`:
    Generate roff output. This is the default behavior when no <file>s are given
    and ronn source text is read from standard input.

  * `-5`, `--html`:
    Generate output in HTML format.

  * `-f`, `--fragment`:
    Generate output in HTML format but only the document fragment, not the
    header, title, or footer.

Document attributes displayed in the header and footer areas of generated
content are specified with these options. (These values may also be set via
the [ENVIRONMENT][].)

  * `--manual`=<manual>:
    The name of the manual this man page belongs to; <manual> is prominently
    displayed top-center in the header area.

  * `--organization`=<name>:
    The name of the group, organization, or individual responsible for
    publishing the document; <name> is displayed in the bottom-left footer area.

  * `--date`=<date>:
    The document's published date; <date> must be formatted `YYYY-MM-DD` and is
    displayed in the bottom-center footer area. The <file> mtime is used when no
    <date> is given, or the current time when no <file> is available.

HTML output may be customized variously:

  * `--style`=<module>[,<module>]...:
    The list of CSS stylesheets to apply to the document. Multiple <module>
    arguments may be specified, but must be separated by commas or spaces.

    When <module> is a simple word, search for files named <module>`.css` in all
    directories listed in the [`RONN_STYLE`](#ENVIRONMENT) environment variable,
    and then search internal styles.

    When <module> includes a _/_ character, use it as the full path to a
    stylesheet file.

    Internal styles are _man_ (included by default), _toc_, and _80c_.  See
    [STYLES][] for descriptions of features added by each module.

Miscellaneous options:

  * `-w`, `--warnings`:
    Show troff warnings on standard error when performing roff conversion. Most
    often, warnings are the result of a bug in ronn's HTML to roff conversion
    logic.

  * `-W`:
    Disable troff warnings. Warnings are disabled by default. This option can be
    used to revert the effect of a previous `-w` argument.

## STYLES

The `--style` option selects a list of CSS stylesheets to include in the
generated HTML. Styles are applied in the order defined, so each can use the
cascade to override previously defined styles.

### Internal Stylesheets

These styles are included with the distribution:

   * `man`:
     Basic manpage styles: typography, definition lists, indentation. This is
     always included regardless of `--style` argument. It is however possible to
     replace the default `man` module with a custom one by placing a `man.css`
     file on the `RONN_STYLE` path.

   * `print`:
     Basic print stylesheet. The generated `<style>` tag includes a
     `media=print` attribute.

   * `toc`:
     Enables the Table of Contents navigation. The TOC markup is included in
     generated HTML by default but hidden with an inline `display:none` style
     rule; the `toc` module turns it on and applies basic TOC styles.

   * `dark`:
     Light text on a dark background.

   * `80c`:
     Changes the display width to mimic the display of a classic 80 character
     terminal. The default display width causes lines to wrap at a gratuitous
     100 characters.

### Custom Stylesheets

Writing custom stylesheets is straight-forward. The following core selectors
allow targeting all generated elements:

   * `.mp`:
     The manual page container element. Present on full documents and document
     fragments.

   * `body#manpage`:
     Signifies that the page was fully-generated by Ronn and contains a single
     manual page (`.mp` element).

   * `.man-decor`:
     The three-item heading and footing elements both have this class.

   * `.man-head`, `.man-foot`:
     The heading and footing, respectively.

   * `.man-title`:
     The main `<h1>` element. Hidden by default unless the manual has no <name>
     or <section> attributes.

See the [internal style sources][internal] for examples.

[internal]: http://github.com/rtomayko/ronn/tree/master/lib/ronn/template
            "internal stylesheet sources"

## EXAMPLES

Generate `roff(7)` output on stdout:

    $ ronn < hello.1.ronn

Build roff and HTML output files based on the input filename and view the roff
manpage using man(1):

    $ ronn hello.1.ronn
    roff: hello.1
    html: hello.1.html
    $ man ./hello.1

Build only the HTML manpage:

    $ ronn --html test.1.ronn
    html: hello.1.html

Build only the roff manpage for all `.ronn` files in the current directory:

    $ ronn --roff *.ronn
    roff: hello.1
    roff: world.1

View a ronn file in the same way as man(1) without building a roff file:

    $ ronn -m hello.1.ronn

## ENVIRONMENT

  * `RONN_MANUAL`:
    A default manual name to be displayed in the top-center header area.
    The `--manual` option takes precedence over this value.

  * `RONN_ORGANIZATION`:
    The default manual publishing group, organization, or individual to be
    displayed in the bottom-left footer area. The `--organization` option takes
    precedence over this value.

  * `RONN_DATE`:
    The default manual date in `YYYY-MM-DD` format. Displayed in the
    bottom-center footer area. The `--date` option takes precedence over this
    value.

  * `RONN_STYLE`:
    A `PATH`-style list of directories to check for stylesheets given to the
    `--style` option. Directories are separated by a _:_; blank entries are
    ignored. Use _._ to include the current working directory.

  * `MANPAGER`:
    The paging program used for man pages. This is typically set to
    something like 'less -is'.

  * `PAGER`:
    Used instead of `MANPAGER` when `MANPAGER` is not defined.

## BUGS

**Ronn** is written in Ruby and depends on hpricot and rdiscount, extension
libraries that are non-trivial to install on some systems. A more portable
version of this program would be welcome.

## COPYRIGHT

Ronn is Copyright (C) 2009 Ryan Tomayko <tomayko.com/about>

## SEE ALSO

ronn(5), markdown(7), manpages(5), man(1), roff(7), groff(1)
